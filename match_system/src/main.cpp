// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "match_server/Match.h"
#include "save_client/Save.h"

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <thrift/transport/TSocket.h>
#include <thrift/transport/TTransportUtils.h>

#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/ThreadFactory.h>
#include <thrift/TToString.h>
#include <thrift/server/TThreadPoolServer.h>
#include <thrift/server/TThreadedServer.h>

#include <iostream>
#include <string>
#include <thread> // 线程操作
#include <mutex> // 锁
#include <condition_variable> // 条件变量，对锁进行封装
#include <queue>
#include <vector>
#include <unistd.h> // 使用睡眠函数

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace ::match_services;
using namespace ::save_service;

struct Task { // 任务
    User user;
    std::string type;
};

struct MessageQueue { // 消息队列
    std::queue<Task> q; // 队列里存的是Task
    std::mutex m;
    std::condition_variable cv;
}message_queue;

class Pool { // 玩家池
    public:
        void add(User user) {
            users.push_back(user);
        }

        void remove(User user) {
            for(uint32_t i=0; i<users.size(); i++) { // uint32_t 无符号整数
                if(users[i].id == user.id) {
                    users.erase(users.begin() + i); // 删除当前这一个玩家
                    break;
                }
            }
        }

        void save_result(int a, int b) { // 匹配完成后，需要保存结果
            printf("Match Result: %d %d\n", a, b);

            std::shared_ptr<TTransport> socket(new TSocket("123.57.47.211", 9090));
            std::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
            std::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
            SaveClient client(protocol);

            try {
                transport->open();

                int res = client.save_data("acs_8253", "1331b90f", a, b); // 密码已经过MD5加密了，hhh

                if(!res) puts("success"); // :验证云端是否存储成功
                else puts("failed");

                transport->close();
            } catch (TException& tx) {
                std::cout << "ERROR: " << tx.what() << std::endl;
            }


        }

        void match() { // 匹配函数

            // 如果有多余两个人就进行匹配
            while(users.size() > 1) {
                // 将分差在50内的玩家进行匹配，每次匹配相近的一对
                sort(users.begin(), users.end(), [&](User& a, User b) { // 先按分值排序
                        return a.score < b.score;
                        });


                bool flag = true; // 防止分差过大时，出现死循环
                for(uint32_t i=1; i<users.size(); i++) {
                    auto a=users[i-1], b=users[i];
                    if(b.score - a.score <= 50) { // 可以匹配
                        users.erase(users.begin() + i - 1, users.begin() + i + 1); // 删掉a,b两个玩家，区间是左闭右开的
                        save_result(a.id, b.id);

                        flag = false;
                        break; // 每次匹配完一对后，break掉for循环
                    }
                }
                // 若玩家列表里还没有匹配，直接终止while循环
                if(flag) break;
            }
        }

    private:
        std::vector<User> users;

}pool;



class MatchHandler : virtual public MatchIf {
    public:
        MatchHandler() {
            // Your initialization goes here
        }

        // 加锁，为了保证有关队列的操作，同一时间只有一个线程在操作它

        int32_t add_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("add_user\n");

            // 加锁,封装的好处是不需要显示地将它解锁
            std::unique_lock<std::mutex> lck(message_queue.m);

            // 操作队列，将任务加到队列里
            message_queue.q.push({user, "add"});

            // 唤醒所有被条件变量卡住的线程 (all or one)
            message_queue.cv.notify_all();

            return 0;
        }

        int32_t remove_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("remove_user\n");

            std::unique_lock<std::mutex> lck(message_queue.m);

            message_queue.q.push({user, "remove"});

            message_queue.cv.notify_all();

            return 0;
        }

};

class MatchCloneFactory : virtual public MatchIfFactory {
    public:
        ~MatchCloneFactory() override = default;
        MatchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) override
        {
            std::shared_ptr<TSocket> sock = std::dynamic_pointer_cast<TSocket>(connInfo.transport);
            /*std::cout << "Incoming connection\n";
            std::cout << "\tSocketInfo: "  << sock->getSocketInfo() << "\n";
            std::cout << "\tPeerHost: "    << sock->getPeerHost() << "\n";
            std::cout << "\tPeerAddress: " << sock->getPeerAddress() << "\n";
            std::cout << "\tPeerPort: "    << sock->getPeerPort() << "\n";*/
            return new MatchHandler;
        }
        void releaseHandler(MatchIf* handler) override {
            delete handler;
        }
};


void consume_task() {
    while(true) {
        // 加锁
        std::unique_lock<std::mutex> lck(message_queue.m);
        if(message_queue.q.empty()) {
            // 线程为空时，应该阻塞住
            // 使用条件变量，卡住，直到有新玩家进来时才继续执行(唤醒)
            // message_queue.cv.wait(lck);

            lck.unlock(); // 解锁
            pool.match(); // 玩家池匹配
            // 实现每隔几秒匹配一次
            sleep(2);


        } else {
            auto task = message_queue.q.front(); // 取出队头
            message_queue.q.pop();

            // 队列操作完后，需要解锁
            // 对队列的操作是共享的，操作完队列就解锁
            lck.unlock();

            // do task
            if(task.type == "add") pool.add(task.user);
            else if (task.type == "remove") pool.remove(task.user);

            pool.match(); // 进行匹配
        }

    }
}


int main(int argc, char **argv) {

    TThreadedServer server(
            std::make_shared<MatchProcessorFactory>(std::make_shared<MatchCloneFactory>()),
            std::make_shared<TServerSocket>(9090), //port
            std::make_shared<TBufferedTransportFactory>(),
            std::make_shared<TBinaryProtocolFactory>());


    std::cout<<"Start Match Server" << std::endl;

    std::thread matching_thread(consume_task);

    server.serve();
    return 0;
}

